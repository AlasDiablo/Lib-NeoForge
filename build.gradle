buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

def build_number = 19
def isExperimental = true
version = "3.0.${build_number}"
if (isExperimental) {
    version += '-experimental'
}
group = 'fr.alasdiablo.diolib'
archivesBaseName = 'DiaboloLib'
java.toolchain.languageVersion = JavaLanguageVersion.of(17)
def deobfSourceClassifier
minecraft {
    mappings channel: 'official', version: '1.18'
    deobfSourceClassifier = getMappings().get()
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                diolib {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                diolib {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'diolib', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                diolib {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft 'net.minecraftforge:forge:1.18-38.0.4'
}

jar {
    manifest.attributes([
            "Specification-Title"     : "DiaboloLib",
            "Specification-Vendor"    : "AlasDiablo, lIotaMiu, Safyrus",
            "Specification-Version"   : "1",
            "Implementation-Title"    : project.name,
            "Implementation-Version"  : project.jar.archiveVersion,
            "Implementation-Vendor"   : "AlasDiablo, lIotaMiu, Safyrus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ])
    destinationDirectory.set(file(rootProject.getRootDir().getPath() + '/output'))
}

jar.finalizedBy('reobfJar')

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    from(sourceSets.main.output) {
        include 'LICENSE'
    }
    def archiveName = 'sources-' + deobfSourceClassifier
    archiveClassifier.set(archiveName)
    destinationDirectory.set(file(rootProject.getRootDir().getPath() + '/output'))
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    def archiveName = 'deobf-' + deobfSourceClassifier
    archiveClassifier.set(archiveName)
    manifest.attributes(["Implementation-Version": project.jar.archiveVersion])
    destinationDirectory.set(file(rootProject.getRootDir().getPath() + '/output'))
}

artifacts {
    archives jar
    archives sourcesJar
    archives deobfJar
}
